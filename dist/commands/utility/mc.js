"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const axios_1 = __importDefault(require("axios"));
const child_process_1 = require("child_process");
exports.default = {
    data: new discord_js_1.SlashCommandBuilder()
        .setName('mc')
        .setDescription('üîç Qu√©t v√† xem th√¥ng tin m·ªôt server Minecraft')
        .addStringOption(opt => opt.setName('ip')
        .setDescription('ƒê·ªãa ch·ªâ IP ho·∫∑c t√™n mi·ªÅn c·ªßa server')
        .setRequired(true))
        .addStringOption(opt => opt.setName('tacvu')
        .setDescription('Qu√©t c·ªïng b·∫±ng nmap')
        .addChoices({ name: 'scan', value: 'scan' })),
    name: "mc",
    aliases: ["mc", "scan"],
    description: "Xem th√¥ng tin v·ªÅ m·ªôt server Minecraft ho·∫∑c qu√©t c·ªïng",
    callback: async (client, message, args) => {
        const isSlash = message instanceof discord_js_1.ChatInputCommandInteraction;
        const target = isSlash ? message.options.getString('ip', true) : args[0];
        const action = isSlash ? message.options.getString('tacvu') : args[1];
        const port = args[2] || 25565;
        if (!target)
            return message.reply("‚ö†Ô∏è Vui l√≤ng cung c·∫•p IP ho·∫∑c t√™n mi·ªÅn server!");
        // N·∫øu d√πng "scan" th√¨ ch·∫°y nmap
        if (action === "scan") {
            (0, child_process_1.exec)(`nmap -p ${port} ${target}`, (err, stdout) => {
                if (err)
                    return message.reply("‚ùå L·ªói khi qu√©t server.");
                message.reply(`üì° K·∫øt qu·∫£ qu√©t \`${target}:${port}\`:\n\`\`\`${stdout}\`\`\``);
            });
            return;
        }
        try {
            const [infoRes, dnsRes] = await Promise.all([
                axios_1.default.get(`https://api.mcsrvstat.us/3/${target}`),
                axios_1.default.get(`https://api.mcsrvstat.us/2/${target}`)
            ]);
            const data = infoRes.data;
            const dns = dnsRes.data;
            const isOnline = data.online;
            const players = data.players?.list || [];
            const plugins = data.plugins || [];
            const mods = data.mods?.names || [];
            const embed = new discord_js_1.EmbedBuilder()
                .setColor(isOnline ? 0x00BFFF : 0xFF3333)
                .setTitle(`TCS Tool | M√°y ch·ªß:`)
                .setDescription(`üåê \`${target}\``)
                .addFields({
                name: 'üìä Th√¥ng tin',
                value: isOnline
                    ? `üü¢ Tr·∫°ng th√°i: Online\nüë• Ng∆∞·ªùi ch∆°i: \`${data.players.online}/${data.players.max}\`\nüíª Phi√™n b·∫£n: \`${data.version || 'Kh√¥ng r√µ'}\`\nüì∂ Ping: \`${data.ping ?? 'N/A'}ms\`\nüåê IP G·ªëc: \`${dns.ip || 'Kh√¥ng r√µ'}\`\nüì° Resolved IP: \`${data.ip}:${data.port}\``
                    : `üî¥ M√°y ch·ªß ƒëang offline`,
                inline: false,
            }, {
                name: 'üí¨ MOTD',
                value: `\`\`\`\n${isOnline ? data.motd.clean.join('\n') : 'Kh√¥ng c√≥'}\n\`\`\``,
                inline: false,
            })
                .setThumbnail(`https://api.mcsrvstat.us/icon/${target}`)
                .setFooter({ text: 'üîß The Clowns Studio Tool Minecraft' })
                .setTimestamp();
            if (isOnline && players.length > 0) {
                embed.addFields({
                    name: `üë§ Ng∆∞·ªùi ch∆°i (${players.length}):`,
                    value: `\`\`\`\n${players.join(', ')}\n\`\`\``,
                    inline: false,
                });
            }
            if (isOnline && plugins.length > 0) {
                embed.addFields({
                    name: `üîå Plugin (${plugins.length})`,
                    value: plugins.join(', ').slice(0, 1000),
                    inline: false,
                });
            }
            if (isOnline && mods.length > 0) {
                embed.addFields({
                    name: `üß© Mods (${mods.length})`,
                    value: mods.join(', ').slice(0, 1000),
                    inline: false,
                });
            }
            const button = new discord_js_1.ButtonBuilder()
                .setCustomId('mc_refresh')
                .setLabel('üîÑ L√†m m·ªõi')
                .setStyle(discord_js_1.ButtonStyle.Primary);
            const row = new discord_js_1.ActionRowBuilder().addComponents(button);
            if (isSlash) {
                await message.reply({ embeds: [embed], components: [row] });
            }
            else {
                await message.reply({ embeds: [embed], components: [row] });
            }
        }
        catch (err) {
            console.error(err);
            return message.reply("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t·ª´ m√°y ch·ªß.");
        }
    }
};
